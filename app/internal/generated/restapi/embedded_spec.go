// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "HTTP server in Go with Swagger endpoints definition",
    "title": "PP",
    "version": "0.0.1"
  },
  "host": "localhost:8081",
  "basePath": "/",
  "paths": {
    "/get/results": {
      "get": {
        "description": "Retrieves messages from kafka",
        "produces": [
          "application/json"
        ],
        "operationId": "getResults",
        "responses": {
          "200": {
            "description": "Ok receiving messages",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "result": {
                    "description": "Calculation result",
                    "type": "number"
                  },
                  "uuid": {
                    "description": "UUID of job",
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/health/check": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "checkHealth",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "app": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Application status",
                      "type": "boolean"
                    },
                    "version": {
                      "description": "Application version",
                      "type": "string"
                    }
                  }
                },
                "kafka": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Kafka status",
                      "type": "boolean"
                    },
                    "version": {
                      "description": "Kafka version",
                      "type": "string"
                    }
                  }
                },
                "workers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "description": "Worker status",
                        "type": "boolean"
                      },
                      "uuid": {
                        "description": "Worker uuid",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hello/{user}": {
      "get": {
        "description": "Says hello to user",
        "produces": [
          "application/json"
        ],
        "operationId": "sayHello",
        "parameters": [
          {
            "type": "string",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid characters in \"user\" provided",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/produce": {
      "post": {
        "description": "Produces message to kafka",
        "produces": [
          "application/json"
        ],
        "operationId": "produceMessage",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "description": "String to calculate",
                  "type": "string",
                  "example": "{a} + [b]"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok producing message",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Error producing message",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "HTTP server in Go with Swagger endpoints definition",
    "title": "PP",
    "version": "0.0.1"
  },
  "host": "localhost:8081",
  "basePath": "/",
  "paths": {
    "/get/results": {
      "get": {
        "description": "Retrieves messages from kafka",
        "produces": [
          "application/json"
        ],
        "operationId": "getResults",
        "responses": {
          "200": {
            "description": "Ok receiving messages",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetResultsOKBodyItems0"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/health/check": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "checkHealth",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "app": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Application status",
                      "type": "boolean"
                    },
                    "version": {
                      "description": "Application version",
                      "type": "string"
                    }
                  }
                },
                "kafka": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Kafka status",
                      "type": "boolean"
                    },
                    "version": {
                      "description": "Kafka version",
                      "type": "string"
                    }
                  }
                },
                "workers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkersItems0"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hello/{user}": {
      "get": {
        "description": "Says hello to user",
        "produces": [
          "application/json"
        ],
        "operationId": "sayHello",
        "parameters": [
          {
            "type": "string",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid characters in \"user\" provided",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/produce": {
      "post": {
        "description": "Produces message to kafka",
        "produces": [
          "application/json"
        ],
        "operationId": "produceMessage",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "description": "String to calculate",
                  "type": "string",
                  "example": "{a} + [b]"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok producing message",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Error producing message",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CheckHealthOKBodyApp": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Application status",
          "type": "boolean"
        },
        "version": {
          "description": "Application version",
          "type": "string"
        }
      }
    },
    "CheckHealthOKBodyKafka": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Kafka status",
          "type": "boolean"
        },
        "version": {
          "description": "Kafka version",
          "type": "string"
        }
      }
    },
    "GetResultsOKBodyItems0": {
      "type": "object",
      "properties": {
        "result": {
          "description": "Calculation result",
          "type": "number"
        },
        "uuid": {
          "description": "UUID of job",
          "type": "string"
        }
      }
    },
    "WorkersItems0": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Worker status",
          "type": "boolean"
        },
        "uuid": {
          "description": "Worker uuid",
          "type": "string"
        }
      }
    }
  }
}`))
}
