// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SayHelloOKCode is the HTTP code returned for type SayHelloOK
const SayHelloOKCode int = 200

/*
SayHelloOK OK

swagger:response sayHelloOK
*/
type SayHelloOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSayHelloOK creates SayHelloOK with default headers values
func NewSayHelloOK() *SayHelloOK {

	return &SayHelloOK{}
}

// WithPayload adds the payload to the say hello o k response
func (o *SayHelloOK) WithPayload(payload string) *SayHelloOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the say hello o k response
func (o *SayHelloOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SayHelloOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SayHelloBadRequestCode is the HTTP code returned for type SayHelloBadRequest
const SayHelloBadRequestCode int = 400

/*
SayHelloBadRequest Invalid characters in "user" provided

swagger:response sayHelloBadRequest
*/
type SayHelloBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSayHelloBadRequest creates SayHelloBadRequest with default headers values
func NewSayHelloBadRequest() *SayHelloBadRequest {

	return &SayHelloBadRequest{}
}

// WithPayload adds the payload to the say hello bad request response
func (o *SayHelloBadRequest) WithPayload(payload string) *SayHelloBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the say hello bad request response
func (o *SayHelloBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SayHelloBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
