// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetResultsHandlerFunc turns a function with the right signature into a get results handler
type GetResultsHandlerFunc func(GetResultsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetResultsHandlerFunc) Handle(params GetResultsParams) middleware.Responder {
	return fn(params)
}

// GetResultsHandler interface for that can handle valid get results params
type GetResultsHandler interface {
	Handle(GetResultsParams) middleware.Responder
}

// NewGetResults creates a new http.Handler for the get results operation
func NewGetResults(ctx *middleware.Context, handler GetResultsHandler) *GetResults {
	return &GetResults{Context: ctx, Handler: handler}
}

/*
	GetResults swagger:route GET /get/results getResults

Retrieves messages from kafka
*/
type GetResults struct {
	Context *middleware.Context
	Handler GetResultsHandler
}

func (o *GetResults) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetResultsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetResultsOKBodyItems0 get results o k body items0
//
// swagger:model GetResultsOKBodyItems0
type GetResultsOKBodyItems0 struct {

	// Calculation result
	Result float64 `json:"result,omitempty"`

	// UUID of job
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this get results o k body items0
func (o *GetResultsOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get results o k body items0 based on context it is used
func (o *GetResultsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetResultsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetResultsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetResultsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
