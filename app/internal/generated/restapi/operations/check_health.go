// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CheckHealthHandlerFunc turns a function with the right signature into a check health handler
type CheckHealthHandlerFunc func(CheckHealthParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckHealthHandlerFunc) Handle(params CheckHealthParams) middleware.Responder {
	return fn(params)
}

// CheckHealthHandler interface for that can handle valid check health params
type CheckHealthHandler interface {
	Handle(CheckHealthParams) middleware.Responder
}

// NewCheckHealth creates a new http.Handler for the check health operation
func NewCheckHealth(ctx *middleware.Context, handler CheckHealthHandler) *CheckHealth {
	return &CheckHealth{Context: ctx, Handler: handler}
}

/*
	CheckHealth swagger:route GET /health/check checkHealth

CheckHealth check health API
*/
type CheckHealth struct {
	Context *middleware.Context
	Handler CheckHealthHandler
}

func (o *CheckHealth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCheckHealthParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CheckHealthOKBody check health o k body
//
// swagger:model CheckHealthOKBody
type CheckHealthOKBody struct {

	// app
	App *CheckHealthOKBodyApp `json:"app,omitempty"`

	// kafka
	Kafka *CheckHealthOKBodyKafka `json:"kafka,omitempty"`

	// workers
	Workers []*CheckHealthOKBodyWorkersItems0 `json:"workers"`
}

// Validate validates this check health o k body
func (o *CheckHealthOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKafka(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWorkers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckHealthOKBody) validateApp(formats strfmt.Registry) error {
	if swag.IsZero(o.App) { // not required
		return nil
	}

	if o.App != nil {
		if err := o.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checkHealthOK" + "." + "app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("checkHealthOK" + "." + "app")
			}
			return err
		}
	}

	return nil
}

func (o *CheckHealthOKBody) validateKafka(formats strfmt.Registry) error {
	if swag.IsZero(o.Kafka) { // not required
		return nil
	}

	if o.Kafka != nil {
		if err := o.Kafka.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checkHealthOK" + "." + "kafka")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("checkHealthOK" + "." + "kafka")
			}
			return err
		}
	}

	return nil
}

func (o *CheckHealthOKBody) validateWorkers(formats strfmt.Registry) error {
	if swag.IsZero(o.Workers) { // not required
		return nil
	}

	for i := 0; i < len(o.Workers); i++ {
		if swag.IsZero(o.Workers[i]) { // not required
			continue
		}

		if o.Workers[i] != nil {
			if err := o.Workers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checkHealthOK" + "." + "workers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checkHealthOK" + "." + "workers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this check health o k body based on the context it is used
func (o *CheckHealthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateApp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKafka(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWorkers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckHealthOKBody) contextValidateApp(ctx context.Context, formats strfmt.Registry) error {

	if o.App != nil {
		if err := o.App.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checkHealthOK" + "." + "app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("checkHealthOK" + "." + "app")
			}
			return err
		}
	}

	return nil
}

func (o *CheckHealthOKBody) contextValidateKafka(ctx context.Context, formats strfmt.Registry) error {

	if o.Kafka != nil {
		if err := o.Kafka.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checkHealthOK" + "." + "kafka")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("checkHealthOK" + "." + "kafka")
			}
			return err
		}
	}

	return nil
}

func (o *CheckHealthOKBody) contextValidateWorkers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Workers); i++ {

		if o.Workers[i] != nil {
			if err := o.Workers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checkHealthOK" + "." + "workers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checkHealthOK" + "." + "workers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckHealthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckHealthOKBody) UnmarshalBinary(b []byte) error {
	var res CheckHealthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CheckHealthOKBodyApp check health o k body app
//
// swagger:model CheckHealthOKBodyApp
type CheckHealthOKBodyApp struct {

	// Application status
	Status bool `json:"status,omitempty"`

	// Application version
	Version string `json:"version,omitempty"`
}

// Validate validates this check health o k body app
func (o *CheckHealthOKBodyApp) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this check health o k body app based on context it is used
func (o *CheckHealthOKBodyApp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckHealthOKBodyApp) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckHealthOKBodyApp) UnmarshalBinary(b []byte) error {
	var res CheckHealthOKBodyApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CheckHealthOKBodyKafka check health o k body kafka
//
// swagger:model CheckHealthOKBodyKafka
type CheckHealthOKBodyKafka struct {

	// Kafka status
	Status bool `json:"status,omitempty"`

	// Kafka version
	Version string `json:"version,omitempty"`
}

// Validate validates this check health o k body kafka
func (o *CheckHealthOKBodyKafka) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this check health o k body kafka based on context it is used
func (o *CheckHealthOKBodyKafka) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckHealthOKBodyKafka) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckHealthOKBodyKafka) UnmarshalBinary(b []byte) error {
	var res CheckHealthOKBodyKafka
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CheckHealthOKBodyWorkersItems0 check health o k body workers items0
//
// swagger:model CheckHealthOKBodyWorkersItems0
type CheckHealthOKBodyWorkersItems0 struct {

	// Worker status
	Status bool `json:"status,omitempty"`

	// Worker uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this check health o k body workers items0
func (o *CheckHealthOKBodyWorkersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this check health o k body workers items0 based on context it is used
func (o *CheckHealthOKBodyWorkersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckHealthOKBodyWorkersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckHealthOKBodyWorkersItems0) UnmarshalBinary(b []byte) error {
	var res CheckHealthOKBodyWorkersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
